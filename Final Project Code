'''
Kristy, Joseph, Kelvin
'''
The whole project is a class.

# Concept: Personality interactive quiz deciding which Inside Out character you are. 
# 6 questions
  # Each question has 5 options
  # Each option is associated with a character


Loops
for loop going through each value and sees which emotion came out the most 


Files
import the Dictionaries which include
1. def init function questions (6) with options as the keys and the values are the options 
2. answers that correspond to options are added to a list called results


Collections
1 list with questions
1 Dictionary with options associated to answers 


Functions
1st: 


Classes
The whole project is one class
3 methods are: 
2 instance variables: 


Questions to ask the user to determine which character they most resonate with.

1. "Pineapple on pizza is ...
a. a unique combination of foods! (joy)
b. okay i guess (sadness)
c. INSANITY! whoever made this combination is not okay(anger)
d. gross! who would eat that?? (disgust)
e. probably poison (fear)

2. My Friends would describe me as...
a. over the top, but always loyal (angry)
b. friends? (sadness)
c. energetic and always down to do anything (joy)
d. brutually honest, only because i want whats best for them (disgust)
e. hesitant to try new things, but will go along because they're my friends (fear)

3. My spirit animal is a ..
a. deer (fear)
b. cat (disgust)
c. dolphin (joy)
d. sloth (sadness)
e. lion (anger)

4. My favorite way to recharge for the next day is... 
a. spending some alone time (sadness)
b. let out stress and go on a run (anger)
c. have a night in with my friends and laugh (joy)
d. plan out my entire day or i feel overwhelmed (fear) 
e. watch a reality tv show (disgust)

5. When I try a new recipe...
a. I question if I might burn the house down ... (fear)
b. I want as much help as i can get, the more the merrier! (joy)
c. Don't even think about getting in my way while I cook (anger)
d. I need to make sure every ingredient doesn't look weird (disgust)
e. I know it'll turn out bad but at least I tried (sadness)

6. My favorite kind of movie is...
a. a beautiful fantasy movie (disgust)
b. a disney pixar movie(fear)
c. a tearjerking drama (sadness)
d. action and thriller (anger)
e. a feel-good comedy (joy)







Disgust personality message
"You're highly opinionated, very honest, and have high standards that you're hesitant to compromise. 
If people want your advice, they need to be prepared to handle the truth."

Joy personality message
Your goal is to make sure the people around you are happy. You tend to be optimistic even in the worst scenarios and
are determined to find the fun! You see challenges as opportunities and moments that will lead to something great!

Fear personality message 
You tend to be the protector and want to make sure everyone is safe. You're constantly on the lookout for danger and
sometimes tend to get too in your head. Try not to worry too much, be more in the moment!

Anger personality message
You are a fiery spirit and tend to let your emotions get the best of you when things dont go your way.
You are quick to overreact and have little patience when you believe things are unfair. Take a deep breath...

Sadness
You feel misunderstood by everyone and want nothing more than to be optimistic for everyone but it's
a little hard to be positive. Sometimes you just need a good cry to uplift your mood.

import os

class Question:
    def __init__(self, question_text, options, correct_answer):
        self.question_text = question_text
        self.options = options
        self.correct_answer = correct_answer

    def ask_question(self):
        print(self.question_text)
        for index, option in enumerate(self.options, 1):
            print(f"{index}. {option}")
        answer = input("Your choice (1/2/3/4): ")
        return int(answer)
class PersonalityQuiz:
    def __init__(self, character_traits, questions):
        self.character_traits = character_traits
        self.questions = questions
        self.scores = {trait: 0 for trait in character_traits}

    def start_quiz(self):
        print("\nWelcome to the Character Personality Quiz!\n")
        for question in self.questions:
            answer = question.ask_question()
            self.process_answer(answer, question)
      def process_answer(self, answer, question):
        if answer == question.correct_answer:
            for trait in self.character_traits:
                self.scores[trait] += 1
      def display_results(self):
          print("\nYour personality results:")
          sorted_scores = sorted(self.scores.items(), key=lambda x: x[1], reverse=True)
          for trait, score in sorted_scores:
              print(f"{trait}: {score}")
  
      def save_results_to_file(self):
          with open("quiz_results.txt", "w") as file:
              file.write("Character Personality Quiz Results\n")
              file.write("-" * 30 + "\n")
              for trait, score in self.scores.items():
                  file.write(f"{trait}: {score}\n")
          print("\nYour results have been saved to 'quiz_results.txt'.")

def load_questions_from_file(filename):
    questions = []
    if os.path.exists(filename):
        with open(filename, 'r') as file:
            lines = file.readlines()
            for line in lines:
                parts = line.strip().split(',')
                question_text = parts[0]
                options = parts[1:5]
                correct_answer = int(parts[5])
                questions.append(Question(question_text, options, correct_answer))
    else:
        print("Question file not found!")
    return questions

character_traits = ["Brave", "Smart", "Friendly", "Mysterious", "Loyal"]


questions = load_questions_from_file("questions.txt")

if not questions:
    questions = [
        Question("?", ["Fight", "Flee", "Hide", "Negotiate"], 1),
        Question("?", ["Reading", "Socializing", "Exploring", "Creating"], 2),
        Question("?", ["Bold", "Clever", "Kind", "Independent"], 3),
        Question("?", ["Honor", "Knowledge", "Friendship", "Freedom"], 4)
    ]

quiz = PersonalityQuiz(character_traits, questions)

quiz.start_quiz()

quiz.display_results()
